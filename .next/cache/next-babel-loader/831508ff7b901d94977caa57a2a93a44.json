{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pi/sensor-dashboard/components/DataTableRow.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query allData{\\n    allData{\\n      time\\n      temperature\\n      humidity\\n      heatIndex\\n      dewPoint\\n      absoluteHumidity\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery, gql } from '@apollo/client';\nimport moment from 'moment';\nvar getData = gql(_templateObject());\n\nfunction DataTableRow() {\n  _s();\n\n  var _this = this;\n\n  var _useQuery = useQuery(getData),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"Error :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 21\n  }, this);\n  return data.allData.map(function (_ref) {\n    var time = _ref.time,\n        temperature = _ref.temperature,\n        humidity = _ref.humidity,\n        heatIndex = _ref.heatIndex,\n        dewPoint = _ref.dewPoint,\n        absoluteHumidity = _ref.absoluteHumidity;\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: moment.unix(time).utc().format(\"MM/DD/YYYY HH:mm:ss\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: temperature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: humidity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: heatIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: dewPoint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: absoluteHumidity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, _this)]\n    }, time, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, _this);\n  });\n}\n\n_s(DataTableRow, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = DataTableRow;\nexport default DataTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataTableRow\");","map":{"version":3,"sources":["/home/pi/sensor-dashboard/components/DataTableRow.js"],"names":["useQuery","gql","moment","getData","DataTableRow","loading","error","data","allData","map","time","temperature","humidity","heatIndex","dewPoint","absoluteHumidity","unix","utc","format"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,IAAMC,OAAO,GAAGF,GAAH,mBAAb;;AAcA,SAASG,YAAT,GAAwB;AAAA;;AAAA;;AAAA,kBACSJ,QAAQ,CAACG,OAAD,CADjB;AAAA,MAChBE,OADgB,aAChBA,OADgB;AAAA,MACPC,KADO,aACPA,KADO;AAAA,MACAC,IADA,aACAA,IADA;;AAGtB,MAAIF,OAAJ,EAAa,oBAAO;AAAA,2BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA,2BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACT,SAAOC,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiB;AAAA,QAAGC,IAAH,QAAGA,IAAH;AAAA,QAASC,WAAT,QAASA,WAAT;AAAA,QAAsBC,QAAtB,QAAsBA,QAAtB;AAAA,QAAgCC,SAAhC,QAAgCA,SAAhC;AAAA,QAA2CC,QAA3C,QAA2CA,QAA3C;AAAA,QAAqDC,gBAArD,QAAqDA,gBAArD;AAAA,wBACpB;AAAA,8BACE;AAAA,kBAAKb,MAAM,CAACc,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,GAAwBC,MAAxB,CAA+B,qBAA/B;AAAL;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA,kBAAKP;AAAL;AAAA;AAAA;AAAA;AAAA,eAFF,eAGE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,eAHF,eAIE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,eAJF,eAKE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,eALF,eAME;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,eANF;AAAA,OAASL,IAAT;AAAA;AAAA;AAAA;AAAA,aADoB;AAAA,GAAjB,CAAP;AAUH;;GAfQN,Y;UACwBJ,Q;;;KADxBI,Y;AAgBT,eAAeA,YAAf","sourcesContent":["import { useQuery, gql } from '@apollo/client';\nimport moment from 'moment';\nconst getData = gql`\n  query allData{\n    allData{\n      time\n      temperature\n      humidity\n      heatIndex\n      dewPoint\n      absoluteHumidity\n    }\n  }\n`;\n\n\nfunction DataTableRow() {\nconst { loading, error, data } = useQuery(getData);\n\n  if (loading) return <tr><td>Loading...</td></tr>;\n  if (error) return <tr><td>Error :(</td></tr>;\n    return data.allData.map(({ time, temperature, humidity, heatIndex, dewPoint, absoluteHumidity}) => (\n        <tr key={time}>\n          <td>{moment.unix(time).utc().format(\"MM/DD/YYYY HH:mm:ss\")}</td>\n          <td>{temperature}</td>\n          <td>{humidity}</td>\n          <td>{heatIndex}</td>\n          <td>{dewPoint}</td>\n          <td>{absoluteHumidity}</td>\n        </tr>\n    ));\n}\nexport default DataTableRow;\n"]},"metadata":{},"sourceType":"module"}