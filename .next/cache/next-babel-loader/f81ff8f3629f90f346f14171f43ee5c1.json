{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pi/sensor-dashboard/components/Graph.js\";\nimport { useQuery, gql } from '@apollo/client';\nimport { Line } from 'react-chartjs-2';\nimport moment from 'moment';\nimport styles from '../styles/Home.module.css';\nconst getData = gql`\n  query allData{\n    allData{\n      time\n      temperature\n      humidity\n      heatIndex\n      dewPoint\n      absoluteHumidity\n    }\n  }\n`;\n\nfunction Graph() {\n  var graphData = [];\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(getData);\n  if (loading) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Loading...\"\n  }, void 0, false);\n  if (error) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Error :(\"\n  }, void 0, false);\n\n  if (data) {\n    for (var i = 0; i < data.allData.length; i++) {\n      graphData.push({\n        time: moment.unix(data.allData[i].time).utc().format(\"MM/DD/YYYY HH:mm:ss\"),\n        temperature: data.allData[i].temperature,\n        humidity: data.allData[i].humidity\n      });\n    }\n\n    graphData = graphData.slice(Math.max(graphData.length - 50, 1));\n  }\n\n  const state = {\n    labels: graphData.map(datapoint => datapoint.time),\n    datasets: [{\n      label: 'Temperature',\n      fill: false,\n      lineTension: 0.5,\n      backgroundColor: 'rgb(54, 162, 235)',\n      borderColor: 'rgba(54, 162, 235, 0.2)',\n      borderWidth: 2,\n      data: graphData.map(datapoint => datapoint.temperature)\n    }]\n  };\n  const humidity = {\n    labels: graphData.map(datapoint => datapoint.time),\n    datasets: [{\n      label: 'Humidity',\n      fill: false,\n      lineTension: 0.5,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)',\n      data: graphData.map(datapoint => datapoint.humidity)\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.graphContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.graphWrapper,\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: state,\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          title: {\n            display: true,\n            text: 'Temperature over time',\n            fontSize: 20\n          },\n          legend: {\n            display: true,\n            position: 'bottom'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.graphWrapper,\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: humidity,\n        options: {\n          title: {\n            display: true,\n            text: 'Humidity over time',\n            fontSize: 20\n          },\n          legend: {\n            display: true,\n            position: 'bottom'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 13\n  }, this);\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/pi/sensor-dashboard/components/Graph.js"],"names":["useQuery","gql","Line","moment","styles","getData","Graph","graphData","loading","error","data","i","allData","length","push","time","unix","utc","format","temperature","humidity","slice","Math","max","state","labels","map","datapoint","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","graphContainer","graphWrapper","responsive","maintainAspectRatio","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import { useQuery, gql } from '@apollo/client';\nimport {Line} from 'react-chartjs-2';\nimport moment from 'moment';\nimport styles from '../styles/Home.module.css'\nconst getData = gql`\n  query allData{\n    allData{\n      time\n      temperature\n      humidity\n      heatIndex\n      dewPoint\n      absoluteHumidity\n    }\n  }\n`;\n\nfunction Graph(){\n    var graphData = []\n    const { loading, error, data } = useQuery(getData);\n    if (loading) return <>Loading...</>;\n    if (error) return <>Error :(</>;\n    if (data){\n        for (var i = 0; i < data.allData.length; i++){\n            graphData.push({\n                time: moment.unix(data.allData[i].time).utc().format(\"MM/DD/YYYY HH:mm:ss\"),\n            temperature: data.allData[i].temperature,\n            humidity: data.allData[i].humidity\n            })\n        }\n        graphData = graphData.slice(Math.max(graphData.length - 50, 1))\n    }\n       const state = {\n  labels: graphData.map(datapoint =>(datapoint.time)),\n  datasets: [\n    {\n      label: 'Temperature',\n      fill: false,\n      lineTension: 0.5,\n        backgroundColor: 'rgb(54, 162, 235)',\n      borderColor: 'rgba(54, 162, 235, 0.2)',\n      borderWidth: 2,\n      data: graphData.map(datapoint =>(datapoint.temperature))\n    }\n  ]\n}\n\n       const humidity = {\n  labels: graphData.map(datapoint =>(datapoint.time)),\n  datasets: [\n    {\n      label: 'Humidity',\n      fill: false,\n      lineTension: 0.5,\n      backgroundColor: 'rgb(255, 99, 132)',\n      borderColor: 'rgba(255, 99, 132, 0.2)',\n      data: graphData.map(datapoint =>(datapoint.humidity))\n    }\n  ]\n}\n\n        return(\n            <div className={styles.graphContainer}>\n            <div className={styles.graphWrapper}>\n          <Line\n          data={state}\n          options={{\n              responsive: true,\n\t\tmaintainAspectRatio: true,\n            title:{\n              display:true,\n              text:'Temperature over time',\n              fontSize:20\n            },\n            legend:{\n              display:true,\n              position:'bottom'\n            }\n          }}\n        />\n            </div>\n\n            <div className={styles.graphWrapper}>\n          <Line\n          data={humidity}\n          options={{\n            title:{\n              display:true,\n              text:'Humidity over time',\n              fontSize:20\n            },\n            legend:{\n              display:true,\n              position:'bottom'\n            }\n          }}\n        />\n            </div>\n            </div>\n        )\n\n}\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}